<!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html> = Get-Content "task_detail.html" -Encoding UTF8
 = @()
 = False
for ( = 0;  -lt <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>.Length; ++) {
    if ( -eq 782 -and <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>[] -match "^\s*</div>\s*$") {
         += <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>[]
         += "                  </div>"
         = True
        continue
    }
    if ( -and <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>[] -match "^\s*<!-- 资源列表 -->\s*$") {
         = False
         += ""
         += <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>[]
        continue
    }
    if (-not ) {
         += <!DOCTYPE html> <html lang="zh-CN">  <head>   <meta charset="utf-8" />   <meta content="width=device-width, initial-scale=1.0" name="viewport" />   <title>TaskPixel - 任务详情</title>   <link crossorigin="" href="https://fonts.gstatic.com/" rel="preconnect" />   <link as="style"     href="https://fonts.googleapis.com/css2?display=swap&amp;family=Press+Start+2P&amp;family=VT323:wght@400&amp;family=Inter:wght@400;500;600;700&amp;subset=latin"     onload="this.rel='stylesheet'" rel="stylesheet" />   <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />   <link rel="stylesheet" href="assets/css/styles.css">   <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>   <script src="js/tailwind-config.js"></script>   <!-- SortableJS for drag-and-drop ordering -->   <script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>   <style>     /* 统一像素字体样式 */     * {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 确保中文也使用像素风格 */     body,     html {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 16px;       line-height: 1.4;     }      /* 页面特定的标签相关样式 */      /* 标签功能样式 */     .tags-input-container {       display: flex;       align-items: center;       gap: 8px;       min-height: 28px;       position: relative;     }      .add-tags-btn {       font-family: 'VT323', monospace;       font-size: 12px;       border: none;       background: transparent;       color: #4F46E5;       padding: 2px 6px;       cursor: pointer;       transition: all 0.2s ease;       white-space: nowrap;     }      .add-tags-btn:hover {       background: #4F46E5;       color: white;       box-shadow: 0 0 8px #4F46E5;     }      .tag-input-wrapper {       position: relative;       display: flex;       flex-direction: column;     }      .tag-input-field {       font-family: 'VT323', monospace;       font-size: 14px;       border: 2px solid #4F46E5;       padding: 4px 8px;       background: white;       color: #212121;       min-width: 120px;       outline: none;     }      .tag-input-field:focus {       box-shadow: 0 0 8px #4F46E5;     }      .tag-suggestions {       position: absolute;       top: 100%;       left: 0;       right: 0;       background: white;       border: 2px solid #4F46E5;       border-top: none;       max-height: 120px;       overflow-y: auto;       z-index: 10;     }      .tag-suggestion-item {       padding: 4px 8px;       font-family: 'VT323', monospace;       font-size: 14px;       cursor: pointer;       border-bottom: 1px solid #e5e7eb;     }      .tag-suggestion-item:hover,     .tag-suggestion-item.selected {       background: #4F46E5;       color: white;     }      .tag-suggestion-item:last-child {       border-bottom: none;     }      .task-tag {       font-family: 'VT323', monospace;       font-size: 14px;       font-weight: bold;       margin-right: 8px;       cursor: pointer;       transition: all 0.2s ease;       -webkit-user-select: none;       user-select: none;     }      .task-tag:hover {       text-shadow: 0 0 8px currentColor;       transform: scale(1.05);     }      .task-tag:hover::after {       content: ' ×';       color: #ef4444;       font-weight: bold;     }      /* 折叠子步骤样式 */     .toggle-substeps-btn {       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       width: 28px !important;       height: 28px !important;       display: flex !important;       align-items: center !important;       justify-content: center !important;       font-family: 'VT323', monospace !important;       font-size: 16px !important;       transition: all 0.1s ease !important;       border-radius: 0 !important;       cursor: pointer;     }      .toggle-substeps-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .toggle-substeps-btn:focus {       outline: 2px solid #4F46E5;       outline-offset: 2px;     }      .substeps-container[data-collapsed="true"] {       display: none;     }        /* 像素风格折叠按钮 - 简洁统一 */     .pixel-toggle-btn {       width: 28px;       height: 28px;       border: 2px solid #000;       box-shadow: 2px 2px 0 #000;       background: #ffffff;       color: #000;       padding: 0;       display: inline-flex;       align-items: center;       justify-content: center;       font-family: 'VT323', monospace;       font-size: 16px;       cursor: pointer;       transition: none;       line-height: 1;     }      .pixel-toggle-btn:hover {       background: #f8f8f8;     }      .pixel-toggle-btn:active {       transform: translate(1px, 1px);       box-shadow: 1px 1px 0 #000;     }      .pixel-toggle-btn:focus {       outline: 2px dashed #4F46E5;       outline-offset: 2px;     }      /* 箭头图标：展开时向下，折叠时向右 */     .pixel-toggle-btn::before {       content: "▼";       font-family: monospace;       font-size: 14px;       font-weight: normal;     }      .pixel-toggle-btn[aria-expanded="false"]::before {       content: "▶";     }      /* 标签页样式 */     .task-tabs {       margin-bottom: 1.5rem;     }      .tab-btn {       padding: 8px 16px;       border: 2px solid #000;       background: #f5f5f5;       color: #666;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 14px;       cursor: pointer;       transition: all 0.2s ease;       border-bottom: none;       position: relative;     }      .tab-btn:first-child {       border-top-left-radius: 4px;     }      .tab-btn:last-child {       border-top-right-radius: 4px;     }      .tab-btn:hover {       background: #e0e0e0;     }      .tab-btn.active {       background: #3b82f6;       color: white;       border-bottom: 2px solid #3b82f6;       transform: translateY(2px);     }      .tab-content {       display: block;     }      .tab-content.hidden {       display: none;     }      /* 资源管理样式 */     .resource-type-group {       border: 2px solid #e0e0e0;       border-radius: 6px;       padding: 12px;       background: #f9f9f9;     }      .resource-add-btn {       display: flex;       align-items: center;       justify-content: center;       gap: 6px;       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 12px;       transition: all 0.2s ease;     }      .resource-add-btn:hover {       transform: translateY(-1px);       box-shadow: 3px 3px 0px #000;     }      .resource-item {       border: 2px solid #e0e0e0;       padding: 12px;       margin-bottom: 8px;       background: white;       transition: all 0.2s ease;     }      .resource-item:hover {       border-color: #3b82f6;       box-shadow: 2px 2px 0px #3b82f6;     }      .resource-item-header {       display: flex;       align-items: center;       gap: 12px;     }      .resource-icon {       font-size: 24px;       width: 32px;       text-align: center;     }      .resource-info {       flex: 1;     }      .resource-name {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace;       font-size: 16px;       color: #333;       margin-bottom: 4px;     }      .resource-path {       font-size: 12px;       color: #666;       word-break: break-all;     }      .resource-delete {       padding: 4px 8px;       font-size: 12px;       background: #ef4444;       color: white;       border: 2px solid #000;     }      .resource-delete:hover {       background: #dc2626;     }      .empty-resources {       border: 2px dashed #ccc;       border-radius: 8px;       background: #f9f9f9;     }      /* 统一操作按钮样式（图标风格） */     .action-btn {       border: 3px solid #000;       box-shadow: 3px 3px 0 #000;       background: #fff;       color: #111827;       display: inline-flex;       align-items: center;       justify-content: center;       gap: 6px;       padding: 6px 8px;       font-size: 13px;       min-width: 36px;       line-height: 1;     }      .action-btn--small {       padding: 4px 6px;       font-size: 12px;       min-width: 30px;     }      .action-icon {       width: 16px;       height: 16px;       display: inline-block;       vertical-align: middle;       shape-rendering: crispEdges;       image-rendering: pixelated;     }      /* 允许保留原有的 Tailwind bg-* 类作为颜色变体 */     .action-btn.bg-green-500 {       background: #10b981;       color: #fff;     }      .action-btn.bg-blue-500 {       background: #3b82f6;       color: #fff;     }      .action-btn.bg-red-500 {       background: #ef4444;       color: #fff;     }      .action-btn.bg-gray-200 {       background: #e5e7eb;       color: #111827;     }      /* 保证标签显示区域和 +Tags 按钮在同一行（在窄屏下回退为垂直布局） */     .task-tags-section .task-tags-display,     .goal-tags-section .goal-tags-display {       display: flex;       align-items: center;       gap: 0.25rem;       flex: 1 1 auto;       min-width: 0;       /* allow flex children to shrink */       overflow-x: auto;     }      .task-tags-section .tags-input-container,     .goal-tags-section .tags-input-container {       flex: 0 0 auto;       margin-left: 0.5rem;     }      /* 小屏幕：让 tags 区域占满一行，按钮回到下一行以避免拥挤 */     @media (max-width: 640px) {        .task-tags-section .task-tags-display,       .goal-tags-section .goal-tags-display {         display: block;         width: 100%;       }        .task-tags-section .tags-input-container,       .goal-tags-section .tags-input-container {         display: block;         margin-left: 0;         margin-top: 0.5rem;       }     }      .task-tags-section {       border-top: 1px dashed #ccc;       border-bottom: 1px dashed #ccc;       padding: 12px 0;     }      .goal-tags-section {       border-top: 1px dashed #e5e7eb;       padding-top: 8px;       margin-bottom: 12px;     }      /* 拖动排序样式 */     .drag-handle {       display: flex;       align-items: center;       justify-content: center;       width: 16px;       height: 16px;       padding: 2px;     }      .drag-handle:hover {       background: rgba(0, 0, 0, 0.05);       border-radius: 2px;     }      .sortable-ghost {       opacity: 0.4;       transform: rotate(2deg);     }      .sortable-chosen {       transform: scale(1.02);       box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);     }      .sortable-drag {       transform: rotate(5deg);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);     }      .substep-item {       transition: all 0.2s ease;       border-radius: 4px;       margin-bottom: 2px;     }      .substep-item {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       padding: 8px 12px !important;     }      .substep-item:hover {       background: #f8f9fa !important;     }      .substep-item span {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 15px !important;       line-height: 1.4 !important;     }      .substep-checkbox {       width: 16px !important;       height: 16px !important;       margin-right: 8px !important;       border: 2px solid #000 !important;       border-radius: 0 !important;     }      /* 全局文字样式统一 */     h1,     h2,     h3,     h4,     h5,     h6 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-weight: normal !important;     }      input,     textarea,     select,     button {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;     }      /* 输入框样式 */     input[type="text"],     input[type="number"],     input[type="email"],     textarea,     select {       border: 2px solid #000 !important;       border-radius: 0 !important;       padding: 6px 8px !important;       font-size: 14px !important;       background: white !important;     }      input[type="text"]:focus,     input[type="number"]:focus,     input[type="email"]:focus,     textarea:focus,     select:focus {       outline: 2px solid #4F46E5 !important;       outline-offset: 2px !important;       border-color: #4F46E5 !important;     }      /* 页面标题优化 */     .text-2xl {       font-size: 24px !important;     }      .text-xl {       font-size: 20px !important;     }      .text-lg {       font-size: 18px !important;     }      /* 按钮组布局优化 */     .flex.gap-2 {       gap: 8px !important;     }      .flex.gap-1 {       gap: 4px !important;     }      /* 卡片间距优化 */     .mb-6 {       margin-bottom: 20px !important;     }      .mb-4 {       margin-bottom: 12px !important;     }      .mb-2 {       margin-bottom: 6px !important;     }      /* 目标卡片拖动样式 */     .goal-card {       transition: all 0.2s ease;       padding: 16px !important;     }      .goal-card.sortable-ghost {       opacity: 0.4;       transform: rotate(1deg);     }      .goal-card.sortable-chosen {       transform: scale(1.01);       box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);     }      .goal-card.sortable-drag {       transform: rotate(3deg);       box-shadow: 0 8px 20px rgba(0, 0, 0, 0.25);     }      /* 按钮样式优化 */     .action-btn {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       padding: 6px 8px !important;       border: 2px solid #000 !important;       background: #c0c0c0 !important;       color: #000 !important;       transition: all 0.1s ease !important;       min-width: 32px;       text-align: center;     }      .action-btn:hover {       transform: translate(-1px, -1px) !important;       box-shadow: 2px 2px 0 #000 !important;     }      .action-btn.bg-green-500 {       background: #22c55e !important;       color: white !important;     }      .action-btn.bg-blue-500 {       background: #3b82f6 !important;       color: white !important;     }      .action-btn.bg-red-500 {       background: #ef4444 !important;       color: white !important;     }      .action-btn.bg-gray-200 {       background: #e5e7eb !important;       color: #374151 !important;     }      /* 卡片头部布局优化 */     .goal-card .flex.items-start.justify-between {       align-items: flex-start !important;       gap: 12px;     }      .goal-card h4 {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 18px !important;       font-weight: normal !important;       line-height: 1.3 !important;       margin-bottom: 8px !important;     }      .goal-card p {       font-family: 'VT323', 'SimHei', 'Microsoft YaHei', monospace !important;       font-size: 14px !important;       line-height: 1.4 !important;       margin-bottom: 12px !important;     }   </style> </head>  <body class="bg-background">   <div class="flex h-full min-h-screen w-full flex-col font-body">     <header       class="flex items-center justify-between whitespace-nowrap border-b-4 border-pixel-border-color px-6 py-4 bg-white">       <div class="flex items-center gap-4">         <svg class="text-pixel-text-color" fill="none" height="32" viewBox="0 0 32 32" width="32"           xmlns="http://www.w3.org/2000/svg">           <path clip-rule="evenodd"             d="M0 0H8V8H0V0ZM8 8H16V16H8V8ZM16 16H24V24H16V16ZM0 16H8V24H0V16ZM8 24H16V32H8V24ZM16 0H24V8H16V0ZM24 8H32V16H24V8Z"             fill="currentColor" fill-rule="evenodd"></path>         </svg>         <h2 class="text-xl font-bold text-pixel-text-color">TaskPixel</h2>       </div>       <div class="hidden md:flex items-center gap-8 text-sm nav-links">         <a class="text-black/70 hover:text-primary nav-link" href="index.html">主页</a>         <a class="text-black/70 hover:text-primary nav-link" href="calendar.html">日历</a>         <a class="text-black/70 hover:text-primary nav-link" href="goals.html">目标</a>         <a class="text-black/70 hover:text-primary nav-link" href="tags_management.html">标签管理</a>         <a class="text-black/70 hover:text-primary nav-link" href="settings.html">设置</a>         <a class="text-black/70 hover:text-primary nav-link" href="data_management.html">数据管理</a>       </div>     </header>     <main class="w-full flex-1 p-4 sm:p-6 md:p-10">       <div class="mx-auto max-w-7xl">         <!-- 左右两栏布局 -->         <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">            <!-- 左侧栏 -->           <div class="space-y-8">             <!-- 任务卡片 - 标签页结构 -->             <div class="pixel-border p-6 panel-bg">               <!-- 标签页导航 -->               <div class="task-tabs mb-6">                 <div class="flex border-b-3 border-black">                   <button                     class="tab-btn active px-4 py-2 border-b-2 border-primary bg-primary/10 text-primary font-display text-sm"                     data-tab="info">                     📋 任务信息                   </button>                   <button class="tab-btn px-4 py-2 hover:bg-gray-100 font-display text-sm text-gray-600"                     data-tab="resources">                     📎 任务资源                   </button>                 </div>               </div>                <!-- 任务信息标签页 -->               <div class="tab-content" data-tab="info">                 <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4">                   <h2 class="font-display text-2xl text-text-primary mb-4 sm:mb-0 task-title"></h2>                   <div class="flex items-center gap-2">                     <span                       class="font-display text-sm px-2 py-1 task-status bg-accent-yellow/20 text-accent-yellow-800 border-2 border-accent-yellow-800">进行中</span>                   </div>                 </div>                 <div class="space-y-6">                   <div>                     <label class="block font-display text-lg text-text-primary mb-2" for="task-description">描述</label>                     <p class="text-xl text-text-secondary task-description"></p>                   </div>                   <!-- 标签区域 -->                   <div class="task-tags-section mt-4">                     <div class="flex items-center gap-2 flex-wrap">                       <div class="task-tags-display flex flex-wrap gap-1">                         <!-- 任务标签显示区域 -->                       </div>                       <div class="tags-input-container" data-target="task" data-task-id="">                         <button class="add-tags-btn">添加标签</button>                         <div class="tag-input-wrapper hidden">                           <input type="text" class="tag-input-field" placeholder="输入标签名称..." autocomplete="off">                           <div class="tag-suggestions hidden"></div>                         </div>                       </div>                     </div>                   </div>                    <div class="mt-4">                     <label class="block font-display text-lg text-text-primary mb-2" for="task-progress">进度</label>                     <div class="progress-bar with-text">                       <div class="progress-bar-fill"></div>                       <div class="progress-label" aria-hidden="true"></div>                     </div>                     <p class="text-right text-text-secondary text-lg mt-1 progress-text"></p>                   </div>                 </div>                 <div class="mt-8 flex items-center justify-end gap-4">                   <button                     class="pixel-button back-button bg-pixel-secondary text-text-primary font-display py-2 px-4 text-sm flex items-center"                     title="返回">                     返回                   </button>                   <button                     class="pixel-button edit-button bg-accent-blue text-white font-display py-2 px-4 text-sm flex items-center"                     title="编辑任务">                     编辑                   </button>                   <button                     class="pixel-button complete-button bg-accent-green text-white font-display py-2 px-4 text-sm flex items-center"                     title="标记为完成">                     完成                   </button>                 </div>               </div>                <!-- 任务资源标签页 -->               <div class="tab-content hidden" data-tab="resources">                 <div class="resource-management">                   <div class="flex items-center justify-between mb-6">                     <h3 class="font-display text-2xl text-text-primary">任务资源管理</h3>                   </div>                    <!-- 资源添加按钮 -->                   <div class="resource-add-buttons mb-6">                     <div class="grid grid-cols-2 gap-4">                       <button class="pixel-button bg-blue-500 text-white p-4 resource-add-btn" data-method="local">                         <div class="text-3xl mb-2">💾</div>                         <div class="font-display text-lg">本地上传</div>                         <div class="text-sm opacity-80">选择本地文件</div>                       </button>                       <button class="pixel-button bg-green-500 text-white p-4 resource-add-btn" data-method="url">                         <div class="text-3xl mb-2">🔗</div>                         <div class="font-display text-lg">URL链接</div>                         <div class="text-sm opacity-80">添加网络资源</div>                       </button>                     </div>                      � URL链接                      <div class="resource-type-group mb-4">                        <div class="grid grid-cols-2 gap-2">                         <button class="pixel-button bg-green-500 text-white p-2 resource-add-btn" data-type="file"                           data-method="local">                           � 本地上传                         </button>                         <button class="pixel-button bg-green-600 text-white p-2 resource-add-btn" data-type="file"                           data-method="url">                          </button>                       </div>                     </div>                         <div class="grid grid-cols-2 gap-2">                          <button class="pixel-button bg-orange-600 text-white p-2 resource-add-btn" data-type="document"                           data-method="url">                           � URL链接                         </button>                       </div>                     </div>                      <!-- 网站链接 -->                     <div class="resource-type-group mb-4">                       <h4 class="font-display text-lg text-gray-700 mb-2">🔗 网站链接</h4>                       <div class="grid grid-cols-1 gap-2">                         <button class="pixel-button bg-purple-500 text-white p-2 resource-add-btn" data-type="link"                           data-method="url">                           🌐 添加网站链接                         </button>                       </div>                     </div>                   </div>                    <!-- 资源列表 -->                   <div class="resource-list-container">                     <div class="resource-list" id="resourceList">                       <!-- 资源项将通过JavaScript动态添加 -->                     </div>                      <!-- 空状态提示 -->                     <div class="empty-resources text-center py-12" id="emptyResourcesState">                       <div class="text-6xl mb-4">📦</div>                       <h4 class="font-display text-xl text-gray-600 mb-2">暂无资源</h4>                       <p class="text-gray-500 mb-4">点击上方按钮开始添加任务相关资源</p>                     </div>                   </div>                 </div>               </div>             </div>              <!-- 目标和子步骤 -->             <div class="pixel-border p-6 panel-bg">               <div class="space-y-6 goals-container">                 <!-- 目标和子步骤将通过JavaScript动态渲染 -->               </div>             </div>           </div>            <!-- 右侧栏 -->           <div class="space-y-8">             <!-- 记录工作进度 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">记录工作进度</h3>               <form id="timeline-form" class="space-y-6">                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="work-content">工作内容</label>                   <textarea id="work-content" placeholder="描述您的工作..." rows="4"></textarea>                 </div>                 <div>                   <label class="block font-display text-lg text-text-primary mb-2" for="time-spent">时间 (小时)</label>                   <input id="time-spent" placeholder="如：2" type="number" step="0.1" min="0.1" />                 </div>                 <div>                   <button type="submit"                     class="pixel-button w-full bg-accent-green text-white font-display py-3 px-4 text-sm flex items-center justify-center gap-2"                     title="记录进度">                     <span>💾</span>                     <span>记录进度</span>                   </button>                 </div>               </form>             </div>              <!-- 进度历史 -->             <div class="pixel-border p-6 panel-bg">               <h3 class="font-display text-2xl text-text-primary mb-6">进度历史</h3>               <div class="space-y-4 timeline-container">                 <!-- 时间线记录将通过JavaScript动态渲染 -->               </div>             </div>           </div>          </div>       </div>     </main>   </div>    <script>     // 确保 TaskPixel 名称空间存在，即使 core.js 未能正确加载     window.TaskPixel = window.TaskPixel || {};      // 统一的编辑任务函数     function editTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        let data, task;        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          data = JSON.parse(raw);         task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }        } catch (parseError) {         console.error('读取任务数据错误:', parseError);         alert('读取任务数据失败: ' + parseError.message);         return;       }        try {         // 创建编辑对话框         const dialogElement = document.createElement('div');         dialogElement.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialogElement.id = 'edit-task-dialog';          // 计算当前进度，决定状态选项         let currentProgress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;         let currentStatus = task.status || 'in-progress';         let isCompleted = currentProgress >= 100;          dialogElement.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">编辑任务</h2>             <form id="edit-task-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-title">任务标题</label>                 <input type="text" id="edit-task-title" class="w-full" required placeholder="输入任务标题" value="${task.title || ''}">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-description">任务描述</label>                 <textarea id="edit-task-description" class="w-full h-32" placeholder="输入任务描述">${task.description || ''}</textarea>               </div>               ${isCompleted ? `               <div class="mb-4">                 <label class="block font-display text-lg mb-2">状态</label>                 <div class="w-full p-2 bg-green-100 text-green-800 border border-green-300 rounded">                   ✅ 已完成（进度100%，自动设置）                 </div>               </div>               ` : `               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="edit-task-status">状态</label>                 <select id="edit-task-status" class="w-full">                   <option value="in-progress" ${currentStatus === 'in-progress' || currentStatus === 'todo' ? 'selected' : ''}>进行中</option>                   <option value="on-hold" ${currentStatus === 'on-hold' ? 'selected' : ''}>搁置</option>                 </select>               </div>               `}               <div class="mb-4">                 <label class="block font-display text-lg mb-2">当前进度: ${currentProgress}%</label>                 <div class="w-full bg-gray-200 rounded-full h-2">                   <div class="bg-blue-600 h-2 rounded-full" style="width: ${currentProgress}%"></div>                 </div>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-edit-task" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">保存</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialogElement);          // 绑定表单提交事件         document.getElementById('edit-task-form').addEventListener('submit', function (e) {           e.preventDefault();            try {             const title = document.getElementById('edit-task-title').value.trim();             const description = document.getElementById('edit-task-description').value.trim();              if (!title) {               alert('任务标题不能为空');               return;             }              // 确定最终状态             let finalStatus;             const progress = window.TaskPixel?.DataStoreAdapter?.getTaskProgress(taskId) || task.progress || 0;              if (progress >= 100) {               finalStatus = 'completed';             } else {               const statusSelect = document.getElementById('edit-task-status');               finalStatus = statusSelect ? statusSelect.value : 'in-progress';             }              // 更新任务数据             task.title = title;             task.description = description;             task.status = finalStatus;              // 保存到localStorage             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 显示成功消息             alert('任务更新成功！');              // 关闭对话框             const dialogElement = document.getElementById('edit-task-dialog');             if (dialogElement) {               dialogElement.remove();             }              // 刷新页面             location.reload();            } catch (submitError) {             console.error('表单提交错误:', submitError);             alert('保存任务时出现错误，请重试：' + submitError.message);           }         });          // 绑定取消按钮         document.getElementById('cancel-edit-task').addEventListener('click', function () {           const dialogElement = document.getElementById('edit-task-dialog');           if (dialogElement) {             dialogElement.remove();           }         });        } catch (dialogError) {         console.error('创建编辑对话框错误:', dialogError);         alert('创建编辑对话框失败: ' + dialogError.message);       }     }      // 统一的完成任务函数     function completeTask(taskId) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 切换完成状态         const oldStatus = task.status;         task.status = task.status === 'completed' ? 'in-progress' : 'completed';          // 如果标记为完成，设置进度为100%         if (task.status === 'completed') {           task.progress = 100;         }          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 显示成功消息         const statusText = task.status === 'completed' ? '已完成' : '进行中';         alert(`任务状态已更新为：${statusText}`);          // 刷新页面         location.reload();        } catch (e) {         console.error('更新任务状态错误:', e);         alert('更新任务状态时出错: ' + e.message);       }     }      // 添加工作进度记录     function addWorkProgress(taskId, content, hours) {       if (!taskId) {         alert('未找到任务ID');         return;       }        try {         const raw = localStorage.getItem('taskpixel_data');         if (!raw) {           alert('未找到任务数据');           return;         }          const data = JSON.parse(raw);         const task = data.tasks.find(t => t.id === taskId);          if (!task) {           alert('未找到指定任务');           return;         }          // 初始化timeline数组         if (!task.timeline) {           task.timeline = [];         }          // 创建新的进度记录         const progressEntry = {           id: 'progress-' + Date.now(),           date: new Date().toISOString(),           content: content,           hours: hours,           timestamp: Date.now()         };          task.timeline.push(progressEntry);          // 更新总工作时间         const totalHours = task.timeline.reduce((sum, entry) => sum + (entry.hours || 0), 0);         task.totalHours = totalHours;          // 保存到localStorage         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 清空表单         document.getElementById('work-content').value = '';         document.getElementById('time-spent').value = '';          // 重新渲染进度历史         renderProgressHistory(task.timeline);          alert('工作进度记录成功！');        } catch (e) {         alert('记录工作进度时出错: ' + e.message);       }     }      // 渲染进度历史     function renderProgressHistory(timeline) {       const container = document.querySelector('.timeline-container');       if (!container) return;        container.innerHTML = '';        if (!timeline || timeline.length === 0) {         container.innerHTML = `           <div class="text-center py-8">             <p class="text-gray-500 mb-4">还没有工作进度记录</p>             <p class="text-gray-400 text-sm">开始记录您的工作进度吧！</p>           </div>         `;         return;       }        // 按时间倒序排列       const sortedTimeline = [...timeline].sort((a, b) => b.timestamp - a.timestamp);        sortedTimeline.forEach(entry => {         const entryElement = document.createElement('div');         entryElement.className = 'pixel-border bg-white p-4 mb-4 hover:shadow-lg transition-shadow';          const date = new Date(entry.date);         const formattedDate = date.toLocaleDateString('zh-CN') + ' ' + date.toLocaleTimeString('zh-CN', { hour: '2-digit', minute: '2-digit' });          entryElement.innerHTML = `           <div class="flex justify-between items-start mb-3">             <div class="flex items-center gap-2">               <div class="w-3 h-3 bg-primary"></div>               <span class="font-display text-sm text-gray-600">${formattedDate}</span>             </div>             <span class="pixel-button bg-primary text-white px-3 py-1 text-xs">${entry.hours} 小时</span>           </div>           <div class="pl-5">             <p class="font-display text-lg text-text-primary">${entry.content}</p>           </div>         `;          container.appendChild(entryElement);       });     }   </script>   <script src="js/core.js"></script>   <script src="js/dataStoreAdapter.js"></script>   <script src="js/tagManager.js"></script>   <script src="js/aiAssist.js"></script>   <script src="js/taskDetail.js"></script>   <script>     // 简化的初始化脚本 - 移除所有调试输出     document.addEventListener('DOMContentLoaded', function () {       // 基础按钮事件       document.querySelector('.back-button')?.addEventListener('click', function () {         window.location.href = 'index.html';       });        document.querySelector('.edit-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id') || window.currentTaskId;         editTask(taskId);       });        document.querySelector('.complete-button')?.addEventListener('click', function () {         const taskId = new URLSearchParams(window.location.search).get('id');         completeTask(taskId);       });        // 记录工作进度表单处理       document.getElementById('timeline-form')?.addEventListener('submit', function (e) {         e.preventDefault();         const taskId = new URLSearchParams(window.location.search).get('id');         const workContent = document.getElementById('work-content').value.trim();         const timeSpent = parseFloat(document.getElementById('time-spent').value);          if (!workContent) {           alert('请输入工作内容');           return;         }         if (!timeSpent || timeSpent <= 0) {           alert('请输入有效的工作时间');           return;         }          addWorkProgress(taskId, workContent, timeSpent);       });        // 初始化 TaskPixel       try {         if (typeof TaskPixel?.init === 'function') {           TaskPixel.init();         }       } catch (e) {         // 静默处理错误       }        // 初始化 TaskDetail       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId && window.TaskPixel?.TaskDetail?.init) {           window.currentTaskId = taskId;           TaskPixel.TaskDetail.currentTaskId = taskId;           TaskPixel.TaskDetail.init();         }       } catch (e) {         // 静默处理错误       }        // 内联标签管理器将在定义后初始化        // 备用数据显示逻辑 - 确保任务信息能够显示       setTimeout(function () {         const taskId = new URLSearchParams(window.location.search).get('id');         if (taskId) {           try {             const raw = localStorage.getItem('taskpixel_data');             if (raw) {               const data = JSON.parse(raw);               const task = (data.tasks || []).find(t => t.id === taskId);                if (task) {                 // 更新标题                 const titleEl = document.querySelector('.task-title');                 if (titleEl && !titleEl.textContent.includes(task.title)) {                   titleEl.textContent = '任务: ' + task.title;                 }                  // 设置任务标签容器的 task-id                 const taskTagContainer = document.querySelector('[data-target="task"]');                 if (taskTagContainer) {                   taskTagContainer.dataset.taskId = taskId;                 }                  // 渲染任务标签（仅在容器为空时）                 const taskTagsDisplay = document.querySelector('.task-tags-display');                 if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderTaskTags &&                   taskTagsDisplay && taskTagsDisplay.children.length === 0) {                   InlineTagManager.renderTaskTags(taskId);                 }                  // 更新描述                 const descEl = document.querySelector('.task-description');                 if (descEl && !descEl.textContent) {                   descEl.textContent = task.description || '暂无描述';                 }                  // 更新进度 - 使用统一的 updateProgressBar 函数                 updateProgressBar(taskId);                  // 更新状态                 const statusEl = document.querySelector('.task-status');                 if (statusEl) {                   let statusText = '进行中';                   let statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                    switch (task.status) {                     case 'todo':                       statusText = '待处理';                       statusClass = 'bg-accent-blue/20 text-accent-blue-800 border-accent-blue-800';                       break;                     case 'on-hold':                       statusText = '搁置';                       statusClass = 'bg-accent-red/20 text-accent-red-800 border-accent-red-800';                       break;                     case 'completed':                       statusText = '已完成';                       statusClass = 'bg-accent-green/20 text-accent-green-800 border-accent-green-800';                       break;                     case 'in-progress':                     default:                       statusText = '进行中';                       statusClass = 'bg-accent-yellow/20 text-accent-yellow-800 border-accent-yellow-800';                       break;                   }                   statusEl.textContent = statusText;                    // 更新状态样式                   statusEl.className = `font-display text-sm px-2 py-1 task-status border-2 ${statusClass}`;                 }                  // 渲染目标                 const goalsContainer = document.querySelector('.goals-container');                 if (goalsContainer) {                   renderGoals(task.goals || [], taskId);                   // 渲染目标后更新进度条                   updateProgressBar(taskId);                 }                  // 渲染进度历史                 if (task.timeline) {                   renderProgressHistory(task.timeline);                 }               }             }           } catch (e) {             // 静默处理错误           }         }       }, 1000);        // 目标渲染函数       function renderGoals(goals, taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer) return;          // 清空容器         goalsContainer.innerHTML = '';          // 添加标题和AI助手按钮         const header = document.createElement('div');         header.className = 'flex items-center justify-between mb-6';         header.innerHTML = `           <h3 class="font-display text-2xl text-text-primary">目标与子步骤</h3>           <button class="pixel-button bg-purple-600 text-white px-4 py-2 text-sm">             <span class="mr-2">✨</span>AI 助手           </button>         `;         goalsContainer.appendChild(header);          // 渲染目标列表         if (goals && goals.length > 0) {           goals.forEach(goal => {             const goalCard = createGoalCard(goal, taskId);             goalsContainer.appendChild(goalCard);              // 渲染目标标签（仅在容器为空时）             const goalTagsDisplay = goalCard.querySelector('.goal-tags-display');             if (typeof InlineTagManager !== 'undefined' && InlineTagManager.renderGoalTags &&               goalTagsDisplay && goalTagsDisplay.children.length === 0) {               InlineTagManager.renderGoalTags(goal.id);             }           });            // 添加"添加新目标"按钮           const addButton = document.createElement('div');           addButton.className = 'text-center mt-6';           addButton.innerHTML = `             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加新目标">添加目标</button>           `;           goalsContainer.appendChild(addButton);         } else {           // 空状态           const emptyState = document.createElement('div');           emptyState.className = 'text-center py-8';           emptyState.innerHTML = `             <p class="text-gray-500 mb-4">还没有设置目标</p>             <button class="pixel-button bg-primary text-white px-4 py-2 add-goal-btn" title="添加目标">添加目标</button>           `;           goalsContainer.appendChild(emptyState);         }          // 绑定添加目标按钮         bindAddGoalEvents(taskId);          // 初始化目标拖动排序         initializeGoalSorting(taskId);          // 应用已保存的折叠首选项（如果有），并初始化子步骤的 Sortable 实例         try {           const raw = localStorage.getItem('taskpixel_ui');           const prefs = raw ? JSON.parse(raw) : {};           const collapsed = (prefs && prefs.collapsedGoals) ? prefs.collapsedGoals[taskId] || {} : {};           document.querySelectorAll('.substeps-wrapper').forEach(wrapper => {             const gid = wrapper.dataset.goalId;             const container = wrapper.querySelector('.substeps-container');             if (!container) return;             const isCollapsed = !!collapsed[gid];             container.setAttribute('data-collapsed', isCollapsed ? 'true' : 'false');             container.style.display = isCollapsed ? 'none' : '';             const toggle = wrapper.querySelector('.toggle-substeps-btn');             if (toggle) toggle.setAttribute('aria-expanded', isCollapsed ? 'false' : 'true');           });            // 初始化模块化 TaskDetail 的子步骤 sortable（如果存在）           if (window.TaskPixel && TaskPixel.TaskDetail && typeof TaskPixel.TaskDetail.attachSubstepsSortables === 'function') {             TaskPixel.TaskDetail.attachSubstepsSortables();           }         } catch (e) {           console.error('应用折叠首选项/初始化子步骤 sortable 时出错', e);         }       }        // 初始化子步骤拖动排序       function initializeSubstepSorting(goalCard, goalId, taskId) {         const substepsContainer = goalCard.querySelector('.substeps-container');         if (!substepsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(substepsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           onEnd: function (evt) {             // 获取新的排序             const substepItems = Array.from(substepsContainer.querySelectorAll('.substep-item'));             const newOrder = substepItems.map(item => item.dataset.substepId);              // 更新数据存储             updateSubstepOrder(taskId, goalId, newOrder);           }         });       }        // 更新子步骤排序       function updateSubstepOrder(taskId, goalId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateSubstepOrder === 'function') {             TaskPixel.DataStore.updateSubstepOrder(taskId, goalId, newOrder);             return;           }         } catch (e) {           console.error('更新子步骤排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            // 重新排序子步骤           const reorderedSubsteps = [];           newOrder.forEach((substepId, index) => {             const substep = goal.substeps.find(s => s.id === substepId);             if (substep) {               substep.order = index;               reorderedSubsteps.push(substep);             }           });            goal.substeps = reorderedSubsteps;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('子步骤排序已更新');         } catch (e) {           console.error('更新子步骤排序失败', e);         }       }        // 初始化目标拖动排序       function initializeGoalSorting(taskId) {         const goalsContainer = document.querySelector('.goals-container');         if (!goalsContainer || !window.Sortable) return;          // 创建Sortable实例         new Sortable(goalsContainer, {           handle: '.drag-handle',           animation: 150,           ghostClass: 'sortable-ghost',           chosenClass: 'sortable-chosen',           dragClass: 'sortable-drag',           filter: '.text-center', // 排除"添加新目标"按钮区域           onEnd: function (evt) {             // 获取所有目标卡片的新排序             const goalCards = Array.from(goalsContainer.querySelectorAll('.goal-card'));             const newOrder = goalCards.map(card => card.dataset.goalId);              // 更新数据存储             updateGoalOrder(taskId, newOrder);           }         });       }        // 更新目标排序       function updateGoalOrder(taskId, newOrder) {         try {           // 优先使用 DataStore API           if (window.TaskPixel && TaskPixel.DataStore && typeof TaskPixel.DataStore.updateGoalOrder === 'function') {             TaskPixel.DataStore.updateGoalOrder(taskId, newOrder);             return;           }         } catch (e) {           console.error('更新目标排序失败 via DataStore', e);         }          // 备用方案：直接操作localStorage         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            // 重新排序目标           const reorderedGoals = [];           newOrder.forEach((goalId, index) => {             const goal = task.goals.find(g => g.id === goalId);             if (goal) {               goal.order = index;               reorderedGoals.push(goal);             }           });            task.goals = reorderedGoals;           localStorage.setItem('taskpixel_data', JSON.stringify(data));            console.log('目标排序已更新');         } catch (e) {           console.error('更新目标排序失败', e);         }       }        // 创建目标卡片       function createGoalCard(goal, taskId) {         const card = document.createElement('div');         card.className = 'border-4 border-black bg-white mb-6 p-4 goal-card';         card.dataset.goalId = goal.id;          // 计算进度         const total = goal.substeps ? goal.substeps.length : 0;         const completed = goal.substeps ? goal.substeps.filter(s => s.completed).length : 0;          card.innerHTML = `           <div class="flex items-start justify-between mb-4">               <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-3 mt-1" title="拖拽排序目标">                 <svg width="14" height="14" viewBox="0 0 12 12" fill="currentColor">                   <circle cx="3" cy="3" r="1"/>                   <circle cx="9" cy="3" r="1"/>                   <circle cx="3" cy="6" r="1"/>                   <circle cx="9" cy="6" r="1"/>                   <circle cx="3" cy="9" r="1"/>                   <circle cx="9" cy="9" r="1"/>                 </svg>               </div>               <div class="flex-1">               <div class="flex items-center justify-between">                 <h4 class="font-display text-lg font-bold mb-2">${goal.title || '未命名目标'}</h4>                 <button class="toggle-substeps-btn pixel-toggle-btn" data-goal-id="${goal.id}" title="展开/折叠子步骤" aria-expanded="false"></button>               </div>               <p class="text-gray-600 text-sm mb-2">${goal.description || ''}</p>             </div>             <div class="flex gap-2">         <button class="action-btn bg-green-500 edit-goal-btn"                        data-goal-id="${goal.id}" title="修改目标">编辑</button>         <button class="action-btn bg-blue-500 add-substep-btn"                        data-goal-id="${goal.id}" title="添加子步骤">新增</button>         <button class="action-btn bg-red-500 delete-goal-btn"                        data-goal-id="${goal.id}" title="删除目标">删除</button>             </div>           </div>            <!-- 目标标签区域（标签显示区与 +Tags 按钮同行，窄屏回退） -->           <div class="goal-tags-section mt-2 mb-3">             <div class="flex items-center gap-2 flex-wrap">               <div class="goal-tags-display flex flex-wrap gap-1">                 <!-- 目标标签显示区域 -->               </div>               <div class="tags-input-container" data-target="goal" data-goal-id="${goal.id}" data-task-id="${taskId}">                 <button class="add-tags-btn">+Tags</button>                 <div class="tag-input-wrapper hidden">                   <input type="text" class="tag-input-field" placeholder="输入标签..." autocomplete="off">                   <div class="tag-suggestions hidden"></div>                 </div>               </div>             </div>           </div>                      <div class="substeps-wrapper" data-goal-id="${goal.id}">             <div class="substeps-container" role="region" aria-label="子步骤列表" data-collapsed="false">             ${goal.substeps ? goal.substeps.map(substep => `               <div class="flex items-center gap-3 py-2 px-3 hover:bg-gray-50 substep-item" data-substep-id="${substep.id}">                 <div class="drag-handle cursor-move text-gray-400 hover:text-gray-600 mr-2" title="拖拽排序">                   <svg width="12" height="12" viewBox="0 0 12 12" fill="currentColor">                     <circle cx="3" cy="3" r="1"/>                     <circle cx="9" cy="3" r="1"/>                     <circle cx="3" cy="6" r="1"/>                     <circle cx="9" cy="6" r="1"/>                     <circle cx="3" cy="9" r="1"/>                     <circle cx="9" cy="9" r="1"/>                   </svg>                 </div>                 <input type="checkbox" ${substep.completed ? 'checked' : ''}                         class="substep-checkbox w-4 h-4"                         data-goal-id="${goal.id}"                         data-substep-id="${substep.id}">                 <span class="flex-1 ${substep.completed ? 'line-through text-gray-500' : ''}">${substep.content || substep.title}</span>                 <div class="flex gap-1 items-center">                   <button class="action-btn bg-green-500 edit-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="修改子步骤">编辑</button>                   <button class="action-btn bg-red-500 delete-substep-btn"                                data-goal-id="${goal.id}"                                data-substep-id="${substep.id}" title="删除子步骤">删除</button>                 </div>               </div>             `).join('') : ''}             </div>           </div>         `;          // 绑定事件         bindGoalCardEvents(card, goal, taskId);          return card;       }        // 绑定目标卡片事件       function bindGoalCardEvents(card, goal, taskId) {         // 添加子步骤         const addBtn = card.querySelector('.add-substep-btn');         if (addBtn) {           addBtn.addEventListener('click', () => openAddSubstepDialog(goal.id, taskId));         }          // 修改目标         const editBtn = card.querySelector('.edit-goal-btn');         if (editBtn) {           editBtn.addEventListener('click', () => openEditGoalDialog(goal.id, taskId));         }          // 删除目标         const deleteBtn = card.querySelector('.delete-goal-btn');         if (deleteBtn) {           deleteBtn.addEventListener('click', () => {             if (confirm('确定要删除这个目标吗？')) {               deleteGoal(taskId, goal.id);             }           });         }          // 复选框事件         const checkboxes = card.querySelectorAll('.substep-checkbox');         checkboxes.forEach(checkbox => {           checkbox.addEventListener('change', function () {             updateSubstepStatus(               taskId,               this.dataset.goalId,               this.dataset.substepId,               this.checked             );           });         });          // 修改子步骤按钮         const editSubstepButtons = card.querySelectorAll('.edit-substep-btn');         editSubstepButtons.forEach(btn => {           btn.addEventListener('click', () => {             openEditSubstepDialog(taskId, btn.dataset.goalId, btn.dataset.substepId);           });         });          // 删除子步骤按钮         const deleteButtons = card.querySelectorAll('.delete-substep-btn');         deleteButtons.forEach(btn => {           btn.addEventListener('click', () => {             if (confirm('确定要删除这个子步骤吗？')) {               deleteSubstep(taskId, btn.dataset.goalId, btn.dataset.substepId);             }           });         });            // 初始化子步骤拖动排序         initializeSubstepSorting(card, goal.id, taskId);          // 折叠/展开子步骤功能         try {           const toggleBtn = card.querySelector('.toggle-substeps-btn');           const wrapper = card.querySelector('.substeps-wrapper');           const container = wrapper && wrapper.querySelector('.substeps-container');            // helper: 读取/写入 UI prefs           function getUIPrefs() {             try {               const raw = localStorage.getItem('taskpixel_ui');               return raw ? JSON.parse(raw) : {};             } catch (e) { return {}; }           }           function setUIPrefs(prefs) {             try { localStorage.setItem('taskpixel_ui', JSON.stringify(prefs)); } catch (e) { }           }            if (toggleBtn && container) {             // 初始化折叠状态（优先从 taskpixel_ui 中读取）             const prefs = getUIPrefs();             prefs.collapsedGoals = prefs.collapsedGoals || {};             prefs.collapsedGoals[taskId] = prefs.collapsedGoals[taskId] || {};             const collapsed = !!prefs.collapsedGoals[taskId][goal.id];             container.setAttribute('data-collapsed', collapsed ? 'true' : 'false');             if (collapsed) container.style.display = 'none';             // 设置初始状态             toggleBtn.setAttribute('aria-expanded', collapsed ? 'false' : 'true');              toggleBtn.addEventListener('click', () => {               const isCollapsed = container.getAttribute('data-collapsed') === 'true';               if (isCollapsed) {                 container.setAttribute('data-collapsed', 'false');                 container.style.display = '';                 prefs.collapsedGoals[taskId][goal.id] = false;               } else {                 container.setAttribute('data-collapsed', 'true');                 container.style.display = 'none';                 prefs.collapsedGoals[taskId][goal.id] = true;               }               // 更新 aria-expanded 属性，CSS 会自动更新箭头方向               toggleBtn.setAttribute('aria-expanded', isCollapsed ? 'true' : 'false');               setUIPrefs(prefs);             });           }         } catch (e) {           console.error('初始化折叠子步骤失败', e);         }       }            // 绑定添加目标事件       function bindAddGoalEvents(taskId) {         const addBtns = document.querySelectorAll('.add-goal-btn');         addBtns.forEach(btn => {           btn.addEventListener('click', () => openAddGoalDialog(taskId));         });       }        // 打开添加目标对话框       function openAddGoalDialog(taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-goal-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加目标</h2>             <form id="add-goal-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-title">目标标题 *</label>                 <input type="text" id="goal-title" class="w-full" required placeholder="输入目标标题">               </div>               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="goal-description">目标描述</label>                 <textarea id="goal-description" class="w-full h-32" placeholder="输入目标描述（可选）"></textarea>               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-goal" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-goal-form').addEventListener('submit', function (e) {           e.preventDefault();           const title = document.getElementById('goal-title').value.trim();           const description = document.getElementById('goal-description').value.trim();            if (!title) {             alert('请输入目标标题');             return;           }            addGoal(taskId, title, description);           dialog.remove();         });          document.getElementById('cancel-add-goal').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到标题输入框         setTimeout(() => {           document.getElementById('goal-title').focus();         }, 100);       }        // 添加目标       function addGoal(taskId, title, description) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task) {               if (!task.goals) task.goals = [];                const newGoal = {                 id: 'goal-' + Date.now(),                 title: title,                 description: description || '',                 substeps: []               };                task.goals.push(newGoal);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);             }           }         } catch (e) {           alert('添加目标失败: ' + e.message);         }       }        // 打开修改目标对话框       function openEditGoalDialog(goalId, taskId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-goal-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改目标</h2>               <form id="edit-goal-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-title">目标标题 *</label>                   <input type="text" id="edit-goal-title" class="w-full" required placeholder="输入目标标题" value="${goal.title || ''}">                 </div>                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-goal-description">目标描述</label>                   <textarea id="edit-goal-description" class="w-full h-32" placeholder="输入目标描述（可选）">${goal.description || ''}</textarea>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-goal" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-goal-form').addEventListener('submit', function (e) {             e.preventDefault();             const title = document.getElementById('edit-goal-title').value.trim();             const description = document.getElementById('edit-goal-description').value.trim();              if (!title) {               alert('请输入目标标题');               return;             }              // 更新目标             goal.title = title;             goal.description = description;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             dialog.remove();           });            document.getElementById('cancel-edit-goal').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到标题输入框           setTimeout(() => {             document.getElementById('edit-goal-title').focus();           }, 100);          } catch (e) {           alert('修改目标失败: ' + e.message);         }       }        // 删除目标       function deleteGoal(taskId, goalId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               task.goals = task.goals.filter(g => g.id !== goalId);               localStorage.setItem('taskpixel_data', JSON.stringify(data));                // 重新渲染               renderGoals(task.goals, taskId);               updateProgressBar(taskId);             }           }         } catch (e) {           alert('删除目标失败: ' + e.message);         }       }        // 打开添加子步骤对话框       function openAddSubstepDialog(goalId, taskId) {         const dialog = document.createElement('div');         dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';         dialog.id = 'add-substep-dialog';          dialog.innerHTML = `           <div class="pixel-border bg-white p-6 w-full max-w-lg">             <h2 class="text-2xl font-display mb-6">添加子步骤</h2>             <form id="add-substep-form">               <div class="mb-4">                 <label class="block font-display text-lg mb-2" for="substep-content">子步骤内容 *</label>                 <input type="text" id="substep-content" class="w-full" required placeholder="输入子步骤内容">               </div>               <div class="flex justify-end gap-4">                 <button type="button" id="cancel-add-substep" class="pixel-button">取消</button>                 <button type="submit" class="pixel-button bg-primary text-white">添加</button>               </div>             </form>           </div>         `;          document.body.appendChild(dialog);          // 绑定事件         document.getElementById('add-substep-form').addEventListener('submit', function (e) {           e.preventDefault();           const content = document.getElementById('substep-content').value.trim();            if (!content) {             alert('请输入子步骤内容');             return;           }            addSubstep(goalId, taskId, content);           dialog.remove();         });          document.getElementById('cancel-add-substep').addEventListener('click', () => {           dialog.remove();         });          // 聚焦到内容输入框         setTimeout(() => {           document.getElementById('substep-content').focus();         }, 100);       }        // 添加子步骤       function addSubstep(goalId, taskId, content) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal) {                 if (!goal.substeps) goal.substeps = [];                  const newSubstep = {                   id: 'substep-' + Date.now(),                   content: content,                   completed: false                 };                  goal.substeps.push(newSubstep);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('添加子步骤失败: ' + e.message);         }       }        // 打开修改子步骤对话框       function openEditSubstepDialog(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (!raw) return;            const data = JSON.parse(raw);           const task = data.tasks.find(t => t.id === taskId);           if (!task || !task.goals) return;            const goal = task.goals.find(g => g.id === goalId);           if (!goal || !goal.substeps) return;            const substep = goal.substeps.find(s => s.id === substepId);           if (!substep) return;            const dialog = document.createElement('div');           dialog.className = 'fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50';           dialog.id = 'edit-substep-dialog';            dialog.innerHTML = `             <div class="pixel-border bg-white p-6 w-full max-w-lg">               <h2 class="text-2xl font-display mb-6">修改子步骤</h2>               <form id="edit-substep-form">                 <div class="mb-4">                   <label class="block font-display text-lg mb-2" for="edit-substep-content">子步骤内容 *</label>                   <input type="text" id="edit-substep-content" class="w-full" required placeholder="输入子步骤内容" value="${substep.content || substep.title || ''}">                 </div>                 <div class="mb-4">                   <label class="flex items-center">                     <input type="checkbox" id="edit-substep-completed" ${substep.completed ? 'checked' : ''} class="mr-2">                     <span class="font-display text-lg">已完成</span>                   </label>                 </div>                 <div class="flex justify-end gap-4">                   <button type="button" id="cancel-edit-substep" class="pixel-button">取消</button>                   <button type="submit" class="pixel-button bg-primary text-white">保存</button>                 </div>               </form>             </div>           `;            document.body.appendChild(dialog);            // 绑定事件           document.getElementById('edit-substep-form').addEventListener('submit', function (e) {             e.preventDefault();             const content = document.getElementById('edit-substep-content').value.trim();             const completed = document.getElementById('edit-substep-completed').checked;              if (!content) {               alert('请输入子步骤内容');               return;             }              // 更新子步骤             substep.content = content;             substep.completed = completed;             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 重新渲染             renderGoals(task.goals, taskId);             updateProgressBar(taskId);             dialog.remove();           });            document.getElementById('cancel-edit-substep').addEventListener('click', () => {             dialog.remove();           });            // 聚焦到内容输入框           setTimeout(() => {             document.getElementById('edit-substep-content').focus();           }, 100);          } catch (e) {           alert('修改子步骤失败: ' + e.message);         }       }        // 删除子步骤       function deleteSubstep(taskId, goalId, substepId) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 goal.substeps = goal.substeps.filter(s => s.id !== substepId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 重新渲染                 renderGoals(task.goals, taskId);                 updateProgressBar(taskId);               }             }           }         } catch (e) {           alert('删除子步骤失败: ' + e.message);         }       }        // 更新子步骤状态       function updateSubstepStatus(taskId, goalId, substepId, completed) {         try {           const raw = localStorage.getItem('taskpixel_data');           if (raw) {             const data = JSON.parse(raw);             const task = data.tasks.find(t => t.id === taskId);             if (task && task.goals) {               const goal = task.goals.find(g => g.id === goalId);               if (goal && goal.substeps) {                 const substep = goal.substeps.find(s => s.id === substepId);                 if (substep) {                   substep.completed = completed;                   localStorage.setItem('taskpixel_data', JSON.stringify(data));                    // 重新渲染以更新进度                   renderGoals(task.goals, taskId);                   updateProgressBar(taskId);                 }               }             }           }         } catch (e) {           alert('更新子步骤状态失败: ' + e.message);         }       }        // 内联标签管理器       const InlineTagManager = {         activeInput: null,          init: function () {           this.bindEvents();           console.log('内联标签管理器初始化完成');         },          bindEvents: function () {           // +Tags 按钮点击事件           document.addEventListener('click', (e) => {             if (e.target.classList.contains('add-tags-btn')) {               this.showTagInput(e.target);             }           });            // 输入框输入事件           document.addEventListener('input', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleTagInput(e.target);             }           });            // 键盘事件           document.addEventListener('keydown', (e) => {             if (e.target.classList.contains('tag-input-field')) {               this.handleKeydown(e);             }           });            // 点击其他地方关闭输入框           document.addEventListener('click', (e) => {             if (!e.target.closest('.tags-input-container')) {               this.hideAllTagInputs();             }           });         },          // 显示标签输入框         showTagInput: function (button) {           this.hideAllTagInputs();            const container = button.closest('.tags-input-container');           const wrapper = container.querySelector('.tag-input-wrapper');           const input = wrapper.querySelector('.tag-input-field');            button.classList.add('hidden');           wrapper.classList.remove('hidden');            setTimeout(() => {             input.focus();             this.activeInput = input;           }, 50);         },          // 隐藏所有标签输入框         hideAllTagInputs: function () {           document.querySelectorAll('.tags-input-container').forEach(container => {             const button = container.querySelector('.add-tags-btn');             const wrapper = container.querySelector('.tag-input-wrapper');             const input = wrapper.querySelector('.tag-input-field');             const suggestions = wrapper.querySelector('.tag-suggestions');              button.classList.remove('hidden');             wrapper.classList.add('hidden');             suggestions.classList.add('hidden');             input.value = '';           });            this.activeInput = null;         },          // 处理标签输入         handleTagInput: function (input) {           const query = input.value.trim();           if (query.length === 0) {             this.hideSuggestions(input);             return;           }            // 获取现有标签进行搜索           const existingTags = this.getAllTags();           const filteredTags = existingTags.filter(tag =>             tag.name.toLowerCase().includes(query.toLowerCase())           );            this.showSuggestions(input, filteredTags, query);         },          // 处理键盘事件         handleKeydown: function (e) {           const input = e.target;           const suggestions = input.parentElement.querySelector('.tag-suggestions');            if (e.key === 'Escape') {             this.hideAllTagInputs();             return;           }            if (e.key === 'Enter') {             e.preventDefault();             const selectedItem = suggestions.querySelector('.tag-suggestion-item.selected');              if (selectedItem) {               if (selectedItem.dataset.tagId === 'create-new') {                 this.createAndAddTag(input, selectedItem.dataset.tagName);               } else {                 this.selectTag(input, selectedItem.dataset.tagId);               }             } else {               const query = input.value.trim();               if (query) {                 this.createAndAddTag(input, query);               }             }             return;           }            if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {             e.preventDefault();             this.navigateSuggestions(suggestions, e.key === 'ArrowDown');             return;           }         },          // 显示建议         showSuggestions: function (input, tags, query) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.innerHTML = '';            // 添加现有标签建议           tags.forEach(tag => {             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = tag.id;             // 使用 fallback 机制确保标签显示             const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;             item.innerHTML = `<span style="color: ${tag.color || '#374151'}">${displayText}</span>`;             item.addEventListener('click', () => this.selectTag(input, tag.id));             suggestions.appendChild(item);           });            // 检查是否已存在完全匹配的标签           const existingTags = this.getAllTags();           const exactMatch = existingTags.find(tag =>             tag.name.toLowerCase() === query.toLowerCase()           );            // 如果没有匹配的标签且没有完全匹配的标签，显示创建新标签选项           if (tags.length === 0 && query && !exactMatch) {             const createItem = document.createElement('div');             createItem.className = 'tag-suggestion-item';             createItem.dataset.tagId = 'create-new';             createItem.dataset.tagName = query;             createItem.innerHTML = `创建新标签: <strong>#${query}</strong>`;             createItem.addEventListener('click', () => this.createAndAddTag(input, query));             suggestions.appendChild(createItem);           } else if (exactMatch && tags.length === 0) {             // 如果有完全匹配但不在过滤结果中，显示该标签             const item = document.createElement('div');             item.className = 'tag-suggestion-item';             item.dataset.tagId = exactMatch.id;             item.innerHTML = `<span style="color: ${exactMatch.color || '#374151'}">#${exactMatch.name}</span>`;             item.addEventListener('click', () => this.selectTag(input, exactMatch.id));             suggestions.appendChild(item);           }            suggestions.classList.remove('hidden');         },          // 隐藏建议         hideSuggestions: function (input) {           const suggestions = input.parentElement.querySelector('.tag-suggestions');           suggestions.classList.add('hidden');         },          // 导航建议列表         navigateSuggestions: function (suggestions, isDown) {           const items = suggestions.querySelectorAll('.tag-suggestion-item');           if (items.length === 0) return;            const currentSelected = suggestions.querySelector('.tag-suggestion-item.selected');           let newIndex = 0;            if (currentSelected) {             currentSelected.classList.remove('selected');             const currentIndex = Array.from(items).indexOf(currentSelected);              if (isDown) {               newIndex = (currentIndex + 1) % items.length;             } else {               newIndex = currentIndex === 0 ? items.length - 1 : currentIndex - 1;             }           }            items[newIndex].classList.add('selected');         },          // 选择标签         selectTag: function (input, tagId) {           const container = input.closest('.tags-input-container');           const target = container.dataset.target;           const taskId = container.dataset.taskId;           const goalId = container.dataset.goalId;            if (target === 'task') {             this.addTagToTask(taskId, tagId);           } else if (target === 'goal') {             this.addTagToGoal(taskId, goalId, tagId);           }            this.hideAllTagInputs();         },          // 创建并添加新标签         createAndAddTag: function (input, tagName) {           // 使用TagManager创建新标签           if (window.TaskPixel && window.TaskPixel.TagManager) {             const result = window.TaskPixel.TagManager.createTag({ name: tagName });             if (result.success) {               this.selectTag(input, result.tagId);             } else if (result.reason === 'tag_exists') {               this.selectTag(input, result.tagId);             } else {               alert('创建标签失败，请重试');             }           } else {             // 备用方案：直接创建简单标签             const cleanTagName = tagName.replace(/^#/, "").trim();              // 检查标签是否已存在             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             if (!data.tags) data.tags = [];              const existingTag = data.tags.find(tag => tag.name.toLowerCase() === cleanTagName.toLowerCase());             if (existingTag) {               // 如果标签已存在，直接选择现有标签               this.selectTag(input, existingTag.id);               return;             }              const newTag = {               id: 'tag-' + Date.now(),               name: cleanTagName,               display_text: '#' + cleanTagName,               color: this.getRandomTagColor(),               created_at: new Date().toISOString(),               usage_count: 0             };              data.tags.push(newTag);             localStorage.setItem('taskpixel_data', JSON.stringify(data));              // 通知 DataStore 重新加载数据             if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {               TaskPixel.DataStore.loadFromStorage();             }              // 使 TagManager 缓存失效             if (typeof TaskPixel !== 'undefined' && TaskPixel.TagManager) {               TaskPixel.TagManager.invalidateCache();             }              this.selectTag(input, newTag.id);           }         },          // 获取所有标签         getAllTags: function () {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             return data.tags || [];           } catch (e) {             return [];           }         },          // 获取随机标签颜色         getRandomTagColor: function () {           const colors = ['#374151', '#6B7280', '#4B5563', '#1F2937', '#065F46', '#7C2D12', '#581C87', '#92400E'];           return colors[Math.floor(Math.random() * colors.length)];         },          // 添加标签到任务         addTagToTask: function (taskId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);              if (task) {               if (!task.tags) task.tags = [];               if (!task.tags.includes(tagId)) {                 task.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderTaskTags(taskId);               }             }           } catch (e) {             console.error('添加任务标签失败:', e);           }         },          // 添加标签到目标         addTagToGoal: function (taskId, goalId, tagId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const goal = task?.goals?.find(g => g.id === goalId);              if (goal) {               if (!goal.tags) goal.tags = [];               if (!goal.tags.includes(tagId)) {                 goal.tags.push(tagId);                 localStorage.setItem('taskpixel_data', JSON.stringify(data));                  // 通知 DataStore 重新加载数据                 if (typeof TaskPixel !== 'undefined' && TaskPixel.DataStore) {                   TaskPixel.DataStore.loadFromStorage();                 }                  this.renderGoalTags(goalId);               }             }           } catch (e) {             console.error('添加目标标签失败:', e);           }         },          // 渲染任务标签         renderTaskTags: function (taskId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const task = data.tasks?.find(t => t.id === taskId);             const allTags = data.tags || [];              const container = document.querySelector('.task-tags-display');             if (!container || !task) return;              container.innerHTML = '';              if (task.tags && task.tags.length > 0) {               task.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromTask(taskId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染任务标签失败:', e);           }         },          // 渲染目标标签         renderGoalTags: function (goalId) {           try {             const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');             const allTags = data.tags || [];              // 找到目标             let goal = null;             for (const task of data.tasks || []) {               const foundGoal = task.goals?.find(g => g.id === goalId);               if (foundGoal) {                 goal = foundGoal;                 break;               }             }              const container = document.querySelector(`[data-goal-id="${goalId}"] .goal-tags-display`);             if (!container || !goal) return;              container.innerHTML = '';              if (goal.tags && goal.tags.length > 0) {               goal.tags.forEach(tagId => {                 const tag = allTags.find(t => t.id === tagId);                 if (tag) {                   const tagElement = this.createTagElement(tag, () => this.removeTagFromGoal(goalId, tagId));                   container.appendChild(tagElement);                 }               });             }           } catch (e) {             console.error('渲染目标标签失败:', e);           }         },          // 创建标签元素         createTagElement: function (tag, onRemove) {           const tagElement = document.createElement('span');           tagElement.className = 'task-tag';           tagElement.style.color = tag.color || '#374151';           // 使用 fallback 机制确保标签显示           const displayText = tag.display_text || '#' + tag.name || '#' + tag.id;           tagElement.textContent = displayText;           tagElement.title = '点击从任务中移除此标签';            tagElement.addEventListener('click', (e) => {             e.preventDefault();             if (confirm(`确定要从此任务中移除标签 ${displayText} 吗？\n\n注意：这只会从当前任务中移除标签，不会删除标签本身。`)) {               onRemove();             }           });            return tagElement;         },          // 从任务移除标签         removeTagFromTask: function (taskId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const task = TaskPixel.DataStore.getTaskById(taskId);              if (task && task.tags) {               task.tags = task.tags.filter(id => id !== tagId);               // 使用 DataStore 的保存方法，确保数据同步               TaskPixel.DataStore.saveToStorage();               this.renderTaskTags(taskId);                // 触发事件通知其他组件               TaskPixel.EventBus.emit("task:tags_updated", {                 taskId: taskId,                 tags: task.tags,               });             }           } catch (e) {             console.error('移除任务标签失败:', e);           }         },          // 从目标移除标签         removeTagFromGoal: function (goalId, tagId) {           try {             // 使用 DataStore API 而不是直接操作 localStorage             const tasks = TaskPixel.DataStore.getAllTasks();              // 找到并更新目标             for (const task of tasks) {               const goal = task.goals?.find(g => g.id === goalId);               if (goal && goal.tags) {                 goal.tags = goal.tags.filter(id => id !== tagId);                 // 使用 DataStore 的保存方法，确保数据同步                 TaskPixel.DataStore.saveToStorage();                 this.renderGoalTags(goalId);                  // 触发事件通知其他组件                 TaskPixel.EventBus.emit("goal:tags_updated", {                   goalId: goalId,                   tags: goal.tags,                 });                 break;               }             }           } catch (e) {             console.error('移除目标标签失败:', e);           }         }       };        // 内联标签管理器初始化将在定义后进行        // 更新进度条       function updateProgressBar(taskId) {         if (!taskId) {           console.warn('updateProgressBar: taskId is missing');           return;         }          setTimeout(() => {           try {             // 获取实际进度             let actualProgress = 0;              if (window.TaskPixel?.DataStoreAdapter?.getTaskProgress) {               actualProgress = window.TaskPixel.DataStoreAdapter.getTaskProgress(taskId);             } else {               // 备用计算方法               const raw = localStorage.getItem('taskpixel_data');               if (raw) {                 const data = JSON.parse(raw);                 const task = data.tasks?.find(t => t.id === taskId);                 if (task) {                   // 计算基于目标和子步骤的进度                   let totalSubsteps = 0;                   let completedSubsteps = 0;                    if (task.goals && Array.isArray(task.goals)) {                     task.goals.forEach(goal => {                       if (goal.substeps && Array.isArray(goal.substeps)) {                         goal.substeps.forEach(substep => {                           totalSubsteps++;                           if (substep.completed) {                             completedSubsteps++;                           }                         });                       }                     });                   }                    actualProgress = totalSubsteps > 0 ? Math.round((completedSubsteps / totalSubsteps) * 100) : 0;                 }               }             }              // 更新进度条             const progressEl = document.querySelector('.progress-bar-fill');             const progressTextEl = document.querySelector('.progress-text');              if (progressEl) {               progressEl.style.width = actualProgress + '%';             }             if (progressTextEl) {               progressTextEl.textContent = actualProgress + '% 完成';             }             // 更新内部标签（若存在）             const progressLabelEl = document.querySelector('.progress-label');             if (progressLabelEl) {               progressLabelEl.textContent = actualProgress + '%';               if (actualProgress < 10) {                 progressLabelEl.classList.add('hidden-small');               } else {                 progressLabelEl.classList.remove('hidden-small');               }             }            } catch (e) {             console.error('Error updating progress bar:', e);           }         }, 100);       }        // 初始化内联标签管理器       InlineTagManager.init();        // 初始化标签页功能       initTabSystem();        // 初始化资源管理功能       initResourceManagement();      });      // 标签页系统     function initTabSystem() {       const tabButtons = document.querySelectorAll('.tab-btn');       const tabContents = document.querySelectorAll('.tab-content');        tabButtons.forEach(button => {         button.addEventListener('click', function () {           const targetTab = this.getAttribute('data-tab');            // 移除所有活跃状态           tabButtons.forEach(btn => btn.classList.remove('active'));           tabContents.forEach(content => content.classList.add('hidden'));            // 激活当前标签页           this.classList.add('active');           const targetContent = document.querySelector(`.tab-content[data-tab="${targetTab}"]`);           if (targetContent) {             targetContent.classList.remove('hidden');           }            // 如果切换到资源标签页，刷新资源列表           if (targetTab === 'resources') {             refreshResourceList();           }         });       });     }      // 资源管理系统     function initResourceManagement() {       const addButtons = document.querySelectorAll('.resource-add-btn');        addButtons.forEach(button => {         button.addEventListener('click', function () {           const uploadMethod = this.getAttribute('data-method');           showAddResourceDialog(uploadMethod);         });       });        // 初始化时刷新资源列表       refreshResourceList();     }      // 显示添加资源对话框     function showAddResourceDialog(method) {       if (method === 'local') {         // 本地文件上传         showLocalFileDialog();       } else if (method === 'url') {         // URL链接上传         showUrlDialog();       }     }      // 本地文件上传对话框     function showLocalFileDialog() {       // 创建文件输入元素       const fileInput = document.createElement('input');       fileInput.type = 'file';       fileInput.style.display = 'none';       fileInput.accept = '*/*'; // 接受所有类型的文件        fileInput.addEventListener('change', function (e) {         const file = e.target.files[0];         if (file) {           const name = prompt('请输入资源名称:', file.name);           if (name) {             // 根据文件类型自动判断资源类型             const resourceType = getResourceTypeFromFile(file);             // 本地文件，记录文件路径（实际项目中可能需要上传到服务器）             const filePath = file.name; // 简化处理，实际应该是完整路径             addResource(resourceType, name, filePath, false, file);           }         }         document.body.removeChild(fileInput);       });        document.body.appendChild(fileInput);       fileInput.click();     }      // URL链接上传对话框     function showUrlDialog() {       const name = prompt('请输入资源名称:');       if (!name) return;        const url = prompt('请输入资源的URL链接:\n\n示例:\n• 图片: https://example.com/image.jpg\n• 文件: https://example.com/file.pdf\n• 网站: https://example.com');       if (!url) return;        // 简单的URL验证       if (!isValidUrl(url)) {         alert('请输入有效的URL地址！');         return;       }        // 根据URL自动判断资源类型       const resourceType = getResourceTypeFromUrl(url);       addResource(resourceType, name, url, true);     }      // URL验证函数     function isValidUrl(string) {       try {         new URL(string);         return true;       } catch (_) {         return false;       }     }      // 根据文件类型判断资源类型     function getResourceTypeFromFile(file) {       const mimeType = file.type.toLowerCase();       const fileName = file.name.toLowerCase();        if (mimeType.startsWith('image/')) {         return 'image';       } else if (mimeType.includes('pdf') || fileName.endsWith('.pdf') ||         mimeType.includes('document') || fileName.match(/\.(doc|docx|txt|md|rtf)$/)) {         return 'document';       } else if (fileName.match(/\.(html|htm)$/)) {         return 'link';       } else {         return 'file';       }     }      // 根据URL判断资源类型     function getResourceTypeFromUrl(url) {       const urlLower = url.toLowerCase();        if (urlLower.match(/\.(jpg|jpeg|png|gif|bmp|svg|webp)($|\?)/)) {         return 'image';       } else if (urlLower.match(/\.(pdf|doc|docx|txt|md|rtf)($|\?)/)) {         return 'document';       } else if (urlLower.match(/\.(html|htm)($|\?)/)) {         return 'link';       } else {         return 'file';       }     }      // 添加资源     function addResource(type, name, path, isUrl = false, fileObj = null) {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) {           alert('未找到任务ID');           return;         }          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task) {           alert('未找到任务');           return;         }          // 初始化资源数组         if (!task.resources) {           task.resources = [];         }          // 添加新资源         const resource = {           id: 'resource_' + Date.now(),           type: type,           name: name,           path: path,           isUrl: isUrl,           addDate: new Date().toISOString(),           size: fileObj ? fileObj.size : null,           fileType: fileObj ? fileObj.type : null         };          task.resources.push(resource);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          const methodText = isUrl ? 'URL链接' : '本地文件';         alert(`${methodText}添加成功！`);        } catch (e) {         console.error('添加资源失败:', e);         alert('添加资源失败: ' + e.message);       }     }      // 删除资源     function deleteResource(resourceId) {       if (!confirm('确定要删除这个资源吗？')) {         return;       }        try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          if (!task || !task.resources) return;          // 删除资源         task.resources = task.resources.filter(r => r.id !== resourceId);          // 保存数据         localStorage.setItem('taskpixel_data', JSON.stringify(data));          // 刷新显示         refreshResourceList();          alert('资源删除成功！');        } catch (e) {         console.error('删除资源失败:', e);         alert('删除资源失败: ' + e.message);       }     }      // 刷新资源列表     function refreshResourceList() {       try {         const taskId = new URLSearchParams(window.location.search).get('id');         if (!taskId) return;          const data = JSON.parse(localStorage.getItem('taskpixel_data') || '{}');         const task = data.tasks?.find(t => t.id === taskId);          const resourceList = document.getElementById('resourceList');         const emptyState = document.getElementById('emptyResourcesState');          if (!resourceList || !emptyState) return;          // 清空列表         resourceList.innerHTML = '';          if (!task || !task.resources || task.resources.length === 0) {           // 显示空状态           emptyState.style.display = 'block';           return;         }          // 隐藏空状态         emptyState.style.display = 'none';          // 资源图标映射         const resourceIcons = {           image: '📷',           file: '📁',           document: '📄',           link: '🔗'         };          // 渲染资源列表         task.resources.forEach(resource => {           const resourceItem = document.createElement('div');           resourceItem.className = 'resource-item';            // 根据资源类型构建不同的HTML结构           const isClickable = resource.isUrl;           const sizeText = resource.size ? formatFileSize(resource.size) : '';           const typeText = resource.fileType || '';            resourceItem.innerHTML = `             <div class="resource-item-header">               <div class="resource-icon">${resourceIcons[resource.type] || '📎'}</div>               <div class="resource-info flex-1" ${isClickable ? `style="cursor: pointer;" onclick="openResource('${resource.path}')"` : ''}>                 <div class="resource-name" style="${isClickable ? 'color: #3b82f6; text-decoration: underline;' : ''}">${resource.name}</div>                 <div class="resource-path">${resource.path}</div>                 <div class="text-xs text-gray-400 mt-1 flex gap-2">                   <span>${resource.isUrl ? '🔗 URL链接' : '💾 本地文件'}</span>                   <span>•</span>                   <span>${new Date(resource.addDate).toLocaleDateString()}</span>                   ${sizeText ? `<span>• ${sizeText}</span>` : ''}                   ${typeText ? `<span>• ${typeText}</span>` : ''}                 </div>                 ${isClickable ? '<div class="text-xs text-blue-500 mt-1">👆 点击访问链接</div>' : ''}               </div>               <div class="flex gap-2">                 ${isClickable ? `<button class="pixel-button bg-blue-500 text-white text-xs px-2 py-1" onclick="openResource('${resource.path}')">访问</button>` : ''}                 <button class="resource-delete pixel-button bg-red-500 text-white text-xs px-2 py-1" onclick="deleteResource('${resource.id}')">                   删除                 </button>               </div>             </div>           `;            resourceList.appendChild(resourceItem);         });        } catch (e) {         console.error('刷新资源列表失败:', e);       }     }      // 文件大小格式化     function formatFileSize(bytes) {       if (bytes === 0) return '0 Bytes';       const k = 1024;       const sizes = ['Bytes', 'KB', 'MB', 'GB'];       const i = Math.floor(Math.log(bytes) / Math.log(k));       return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];     }      // 打开资源链接     function openResource(url) {       if (!url) return;        try {         // 在新标签页中打开链接         window.open(url, '_blank', 'noopener,noreferrer');       } catch (e) {         console.error('打开链接失败:', e);         alert('无法打开链接: ' + url);       }     }      // 将函数设为全局，以便在onclick中调用     window.deleteResource = deleteResource;     window.openResource = openResource;    </script> </body>  </html>[]
    }
}
 | Set-Content "task_detail_cleaned.html" -Encoding UTF8
