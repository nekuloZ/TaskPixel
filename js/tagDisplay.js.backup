/**
 * TaskPixel 统一标签显示组件
 * 提供一致的标签显示和交互功能
 */

TaskPixel.TagDisplay = {
  // 默认配置
  defaultOptions: {
    size: "normal", // small, normal, large
    interactive: true,
    showUsageCount: false,
    allowRemove: true,
    showTooltip: true,
    maxTags: 0, // 0 = 无限制
    theme: "default", // default, compact, minimal
  },

  // 标签大小配置
  sizeConfig: {
    small: {
      className: "tag-small",
      textSize: "text-xs",
      padding: "px-2 py-0.5",
    },
    normal: {
      className: "tag-normal",
      textSize: "text-sm",
      padding: "px-3 py-1",
    },
    large: {
      className: "tag-large",
      textSize: "text-base",
      padding: "px-4 py-2",
    },
  },

  // 渲染任务标签
  renderTaskTags: function (taskId, container, options = {}) {
    try {
      if (!taskId || !container) {
        console.warn("TagDisplay.renderTaskTags: 缺少必要参数");
        return false;
      }

      const config = { ...this.defaultOptions, ...options };
      const tags = TaskPixel.DataStore.getTaskTags(taskId);

      return this._renderTagsInContainer(container, tags, config, {
        type: "task",
        taskId: taskId,
        onRemove: (tagId) =>
          this._handleTaskTagRemove(taskId, tagId, container, config),
      });
    } catch (error) {
      console.error("TagDisplay.renderTaskTags: 渲染失败", error);
      return false;
    }
  },

  // 渲染目标标签
  renderGoalTags: function (taskId, goalId, container, options = {}) {
    try {
      if (!taskId || !goalId || !container) {
        console.warn("TagDisplay.renderGoalTags: 缺少必要参数");
        return false;
      }

      const config = { ...this.defaultOptions, ...options };
      const tags = TaskPixel.DataStore.getGoalTags(taskId, goalId);

      return this._renderTagsInContainer(container, tags, config, {
        type: "goal",
        taskId: taskId,
        goalId: goalId,
        onRemove: (tagId) =>
          this._handleGoalTagRemove(taskId, goalId, tagId, container, config),
      });
    } catch (error) {
      console.error("TagDisplay.renderGoalTags: 渲染失败", error);
      return false;
    }
  },

  // 渲染标签列表
  renderTagList: function (tags, container, options = {}) {
    try {
      if (!Array.isArray(tags) || !container) {
        console.warn("TagDisplay.renderTagList: 无效参数");
        return false;
      }

      const config = { ...this.defaultOptions, ...options };

      return this._renderTagsInContainer(container, tags, config, {
        type: "list",
        onRemove: config.onRemove || null,
      });
    } catch (error) {
      console.error("TagDisplay.renderTagList: 渲染失败", error);
      return false;
    }
  },

  // 创建单个标签元素
  createTagElement: function (tag, options = {}) {
    try {
      if (!tag || !tag.id) {
        console.warn("TagDisplay.createTagElement: 无效标签数据");
        return null;
      }

      const config = { ...this.defaultOptions, ...options };
      return this._createTagElement(tag, config);
    } catch (error) {
      console.error("TagDisplay.createTagElement: 创建失败", error);
      return null;
    }
  },

  // 更新标签外观
  updateTagAppearance: function (tagElement, tag) {
    try {
      if (!tagElement || !tag) {
        console.warn("TagDisplay.updateTagAppearance: 无效参数");
        return false;
      }

      const styles = this.getTagStyles(tag, "normal");
      Object.assign(tagElement.style, styles);

      const textElement = tagElement.querySelector(".tag-text");
      if (textElement) {
        textElement.textContent = tag.display_text || "#" + tag.name;
      }

      return true;
    } catch (error) {
      console.error("TagDisplay.updateTagAppearance: 更新失败", error);
      return false;
    }
  },

  // 获取标签样式
  getTagStyles: function (tag, size = "normal") {
    try {
      const baseColor = tag.color || "#374151";

      return {
        borderColor: baseColor,
        color: baseColor,
        backgroundColor: this._hexToRgba(baseColor, 0.1),
        boxShadow: `inset 0 0 5px ${this._hexToRgba(baseColor, 0.2)}`,
      };
    } catch (error) {
      console.error("TagDisplay.getTagStyles: 获取样式失败", error);
      return {};
    }
  },

  // 处理标签点击
  handleTagClick: function (tagId, action, context = {}) {
    try {
      const tag = TaskPixel.TagManager.getTagById(tagId);
      if (!tag) {
        console.warn("TagDisplay.handleTagClick: 标签不存在", tagId);
        return;
      }

      switch (action) {
        case "remove":
          this._handleTagRemove(tagId, context);
          break;
        case "edit":
          this._handleTagEdit(tagId, context);
          break;
        case "view":
          this._handleTagView(tagId, context);
          break;
        default:
          console.warn("TagDisplay.handleTagClick: 未知操作", action);
      }
    } catch (error) {
      console.error("TagDisplay.handleTagClick: 处理点击失败", error);
    }
  },

  // 私有方法：在容器中渲染标签
  _renderTagsInContainer: function (container, tags, config, context) {
    try {
      // 清空容器
      container.innerHTML = "";

      if (!tags || tags.length === 0) {
        if (config.showEmptyState !== false) {
          this._renderEmptyState(container, config);
        }
        return true;
      }

      // 限制显示的标签数量
      const displayTags =
        config.maxTags > 0 ? tags.slice(0, config.maxTags) : tags;
      const hiddenCount = tags.length - displayTags.length;

      // 创建标签容器
      const tagsWrapper = document.createElement("div");
      tagsWrapper.className = "tags-wrapper flex flex-wrap gap-2";

      // 渲染每个标签
      displayTags.forEach((tag) => {
        const tagElement = this._createTagElement(tag, config, context);
        if (tagElement) {
          tagsWrapper.appendChild(tagElement);
        }
      });

      container.appendChild(tagsWrapper);

      // 如果有隐藏的标签，显示"更多"指示器
      if (hiddenCount > 0) {
        const moreIndicator = this._createMoreIndicator(
          hiddenCount,
          tags,
          config
        );
        container.appendChild(moreIndicator);
      }

      return true;
    } catch (error) {
      console.error("TagDisplay._renderTagsInContainer: 渲染失败", error);
      return false;
    }
  },

  // 私有方法：创建标签元素
  _createTagElement: function (tag, config, context = {}) {
    try {
      const sizeConfig = this.sizeConfig[config.size] || this.sizeConfig.normal;

      // 创建标签元素
      const tagElement = document.createElement("span");
      tagElement.className = `tag-element pixel-border font-display font-bold ${sizeConfig.className} ${sizeConfig.textSize} ${sizeConfig.padding}`;
      tagElement.dataset.tagId = tag.id;

      // 应用样式
      const styles = this.getTagStyles(tag, config.size);
      Object.assign(tagElement.style, styles);

      // 创建文本内容
      const textElement = document.createElement("span");
      textElement.className = "tag-text";
      let displayText = tag.display_text || "#" + tag.name;

      if (config.showUsageCount && tag.usage_count > 0) {
        displayText += ` (${tag.usage_count})`;
      }

      textElement.textContent = displayText;
      tagElement.appendChild(textElement);

      // 添加交互功能
      if (config.interactive) {
        this._addTagInteractions(tagElement, tag, config, context);
      }

      // 添加工具提示
      if (config.showTooltip) {
        this._addTooltip(tagElement, tag, context);
      }

      return tagElement;
    } catch (error) {
      console.error("TagDisplay._createTagElement: 创建元素失败", error);
      return null;
    }
  },

  // 私有方法：添加标签交互
  _addTagInteractions: function (tagElement, tag, config, context) {
    try {
      // 悬停效果
      tagElement.addEventListener("mouseenter", () => {
        const enhancedColor = this._adjustBrightness(
          tag.color || "#374151",
          20
        );
        tagElement.style.boxShadow = `0 0 10px ${this._hexToRgba(
          enhancedColor,
          0.6
        )}, inset 0 0 5px ${this._hexToRgba(enhancedColor, 0.2)}`;
        tagElement.style.backgroundColor = this._hexToRgba(enhancedColor, 0.15);
        tagElement.style.transform = "scale(1.05)";
      });

      tagElement.addEventListener("mouseleave", () => {
        const styles = this.getTagStyles(tag, config.size);
        Object.assign(tagElement.style, styles);
        tagElement.style.transform = "scale(1)";
      });

      // 点击事件
      if (config.allowRemove && context.onRemove) {
        tagElement.style.cursor = "pointer";
        tagElement.title = "点击移除此标签";

        tagElement.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();

          if (
            confirm(`确定要移除标签 ${tag.display_text || "#" + tag.name} 吗？`)
          ) {
            context.onRemove(tag.id);
          }
        });

        // 添加删除指示器
        const removeIndicator = document.createElement("span");
        removeIndicator.className = "tag-remove-indicator";
        removeIndicator.innerHTML = " ×";
        removeIndicator.style.cssText =
          "opacity: 0; transition: opacity 0.2s; margin-left: 4px; font-weight: bold;";

        tagElement.appendChild(removeIndicator);

        tagElement.addEventListener("mouseenter", () => {
          removeIndicator.style.opacity = "1";
        });

        tagElement.addEventListener("mouseleave", () => {
          removeIndicator.style.opacity = "0";
        });
      }
    } catch (error) {
      console.error("TagDisplay._addTagInteractions: 添加交互失败", error);
    }
  },

  // 私有方法：添加工具提示
  _addTooltip: function (tagElement, tag, context) {
    try {
      let tooltipText = tag.display_text || "#" + tag.name;

      if (tag.description) {
        tooltipText += "\n" + tag.description;
      }

      if (tag.usage_count > 0) {
        tooltipText += `\n使用次数: ${tag.usage_count}`;
      }

      if (context.type) {
        tooltipText += `\n类型: ${context.type}`;
      }

      tagElement.title = tooltipText;
    } catch (error) {
      console.error("TagDisplay._addTooltip: 添加工具提示失败", error);
    }
  },

  // 私有方法：创建"更多"指示器
  _createMoreIndicator: function (hiddenCount, allTags, config) {
    const moreElement = document.createElement("span");
    moreElement.className =
      "tag-more-indicator pixel-border font-display text-sm px-2 py-1 cursor-pointer";
    moreElement.style.cssText =
      "border-color: #6B7280; color: #6B7280; background-color: #F3F4F6;";
    moreElement.textContent = `+${hiddenCount}`;
    moreElement.title = "点击查看所有标签";

    moreElement.addEventListener("click", () => {
      this._showAllTagsModal(allTags, config);
    });

    return moreElement;
  },

  // 私有方法：显示所有标签的模态框
  _showAllTagsModal: function (tags, config) {
    try {
      const modal = document.createElement("div");
      modal.className =
        "fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50";

      modal.innerHTML = `
        <div class="pixel-border bg-white p-6 max-w-2xl max-h-96 overflow-y-auto">
          <div class="flex justify-between items-center mb-4">
            <h3 class="text-xl font-display">所有标签</h3>
            <button class="close-modal pixel-button-sm">×</button>
          </div>
          <div class="tags-modal-content"></div>
        </div>
      `;

      const modalContent = modal.querySelector(".tags-modal-content");
      this.renderTagList(tags, modalContent, {
        ...config,
        maxTags: 0,
        allowRemove: false,
      });

      modal.querySelector(".close-modal").addEventListener("click", () => {
        document.body.removeChild(modal);
      });

      modal.addEventListener("click", (e) => {
        if (e.target === modal) {
          document.body.removeChild(modal);
        }
      });

      document.body.appendChild(modal);
    } catch (error) {
      console.error("TagDisplay._showAllTagsModal: 显示模态框失败", error);
    }
  },

  // 私有方法：渲染空状态
  _renderEmptyState: function (container, config) {
    const emptyElement = document.createElement("div");
    emptyElement.className = "tag-empty-state text-gray-500 text-sm italic";
    emptyElement.textContent = config.emptyText || "暂无标签";
    container.appendChild(emptyElement);
  },

  // 私有方法：处理任务标签移除
  _handleTaskTagRemove: function (taskId, tagId, container, config) {
    try {
      const result = TaskPixel.TagManager.removeTagFromTask(taskId, tagId);
      if (result.success) {
        // 重新渲染
        this.renderTaskTags(taskId, container, config);
        this._showMessage("标签已移除", "success");
      } else {
        console.error("移除任务标签失败:", result.error);
        this._showMessage(
          "移除标签失败: " + (result.error ? result.error.message : "未知错误"),
          "error"
        );
      }
    } catch (error) {
      console.error("_handleTaskTagRemove: 处理失败", error);
      this._showMessage("移除标签时发生错误", "error");
    }
  },

  // 私有方法：处理目标标签移除
  _handleGoalTagRemove: function (taskId, goalId, tagId, container, config) {
    try {
      const result = TaskPixel.TagManager.removeTagFromGoal(
        taskId,
        goalId,
        tagId
      );
      if (result.success) {
        // 重新渲染
        this.renderGoalTags(taskId, goalId, container, config);
        this._showMessage("标签已移除", "success");
      } else {
        console.error("移除目标标签失败:", result.error);
        this._showMessage(
          "移除标签失败: " + (result.error ? result.error.message : "未知错误"),
          "error"
        );
      }
    } catch (error) {
      console.error("_handleGoalTagRemove: 处理失败", error);
      this._showMessage("移除标签时发生错误", "error");
    }
  },

  // 私有方法：颜色工具函数
  _hexToRgba: function (hex, alpha) {
    try {
      const r = parseInt(hex.slice(1, 3), 16);
      const g = parseInt(hex.slice(3, 5), 16);
      const b = parseInt(hex.slice(5, 7), 16);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    } catch (error) {
      return `rgba(55, 65, 81, ${alpha})`; // 默认颜色
    }
  },

  _adjustBrightness: function (hex, percent) {
    try {
      const num = parseInt(hex.replace("#", ""), 16);
      const amt = Math.round(2.55 * percent);
      const R = (num >> 16) + amt;
      const G = ((num >> 8) & 0x00ff) + amt;
      const B = (num & 0x0000ff) + amt;
      return (
        "#" +
        (
          0x1000000 +
          (R < 255 ? (R < 1 ? 0 : R) : 255) * 0x10000 +
          (G < 255 ? (G < 1 ? 0 : G) : 255) * 0x100 +
          (B < 255 ? (B < 1 ? 0 : B) : 255)
        )
          .toString(16)
          .slice(1)
      );
    } catch (error) {
      return hex; // 返回原始颜色
    }
  },

  // 私有方法：显示消息
  _showMessage: function (message, type = "info") {
    const messageElement = document.createElement("div");
    const bgColor =
      {
        success: "bg-green-500",
        error: "bg-red-500",
        warning: "bg-yellow-500",
        info: "bg-blue-500",
      }[type] || "bg-blue-500";

    messageElement.className = `fixed bottom-4 right-4 ${bgColor} text-white px-4 py-2 pixel-border z-50`;
    messageElement.textContent = message;

    document.body.appendChild(messageElement);

    setTimeout(() => {
      if (document.body.contains(messageElement)) {
        document.body.removeChild(messageElement);
      }
    }, 3000);
  },
};
